class Solution {
public:
    
    void dfs(vector<vector<int>>& g, int u, vector<bool>& vis, int& cnt)
    {
        vis[u] = true;
        int n = g.size();
        cnt++;
        for(int k = 0; k < n; k++)
        {
            if(u != k and g[u][k] == 1 and !vis[k])
            {
                dfs(g, k, vis, cnt);
            }
        }
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        
        int n = graph.size();
        int k = initial.size();
        int ans = INT_MAX;
        vector<bool> infected(n, false);
        int ans_ind=-1;
    
        for(int i = 0; i < k; i++)
        {
            infected[initial[i]] = true;
        }
        for(int i = 0; i < k; i++)
        {
            vector<bool> vis(n, false);
            infected[initial[i]] = false;
            int c = 0;
            for(int j = 0; j < k; j++)
            {
                if(!vis[initial[j]] and infected[initial[j]])   
                {
                    dfs(graph, initial[j], vis, c);
                }
            }
            if(ans >= c)
            {
                if(ans > c)
                {
                    ans = c;
                    ans_ind = initial[i];    
                }
                else
                {
                    ans_ind= min(ans_ind, initial[i]);
                }
                
            }
            infected[initial[i]] = true;
        }
        return ans_ind;
    }
};